.chat-screen {
  background-color: #abc1d1;
  /* 채팅의 배경색을 설줭해줬다. */
  height: 500vh;
  /* 채팅 화면의 스크롤을 구현하기 위함이다. */
}

.chat-screen .alt-header,
.chat-screen .status-bar {
  top: 0;
  position: fixed;
  width: 100%;
  /* position: fixed; 로 고정하고 width를 줘야지만 왼쪽으로 아이콘이 쏠리지 않는다. */
  box-sizing: border-box;
  /* box-sizing: border-box;을 주지 않으면 맨 오른쪽 아이콘이 오른쪽까지 넘어가 버린다. */
  background-color: #abc1d1;
  /* 스크롤 시에 alt-header와 timestamp가 겹쳐 보이는 것을 방지하기 위해 배경색을 주었다.
    다만 이러면 alt-header가 status-bar를 가리게 된다. 이를 수정하기 위해 z-inderx라는 것을
    사용해야 한다. z-index는 <div>가 맨 앞에서부터 몇 번쨰인지 즉 layer 순서를 나타낸다.
    display를 사용하거나 positon: fixed나 absolute;를 사용하면 layer를 갖게 된다. 기본값은 0이다.
    즉 status-bar와 alt-header가 main-screen을 덮고있는 것이다.
  */
  top: 10px;
}

.chat-screen .alt-header {
  z-index: 1;
}

.chat-screen .status-bar {
  z-index: 2;
}

/* z-index는 숫자가 클수록 위의 layer이다. */

@keyframes fadeIn {
  from {
    transform: translateY(30px);
    opacity: 0;
  }
  to {
    transform: none;
    opacity: 1;
  }
  /* 화면 내용이 아래에서 위로 올라오게 하는 애니메이션이다. */
}

.main-chat {
  margin-top: 180px;
  /* .chat-screen .alt-header에 top: 0;를 줘서 맨 위에 고정시키고 main-chat에 margin-top: 150px;를 줘서
      status-bar와 alt-header가 timestamp 위에 있어서 겹쳐 보이는 현상을 해결한다.

      /* 어떤 요소를 고정하면 그 요소는 이전의 box들과 다른 layer가 되므로 padding이 아닌 margin를 가져야만 한다. */
  display: flex;
  flex-direction: column;
  align-items: center;
  /* display: flex;을 주면 배경이 글자에 맞게 크기가 변하는 것을 볼 수 있다. flex이기 떄문
    flex-direction: column;으로 주축의 방향을 바꾼 후 align-items: center; 로 중앙 정렬
  */
  animation: fadeIn 1s linear;
}

.chat__timestamp {
  color: white;
  background-color: #92a4b2;
  padding: 15px;
  border-radius: 25px;
  font-size: 14px;
  margin-bottom: 25px;
  /* timestamp와 message-row 간의 공간을 줬다. */
}

@keyframes fadeInSide-message-row {
  from {
    transform: translateX(-80px);
    opacity: 0;
  }
  to {
    transform: none;
    opacity: 1;
  }

  /* 채팅창에서 위쪽 채팅을 위한 애니메이션이다. */
}

.message-row {
  width: 100%;
  display: flex;

  /* width: 100%;를 주면 message-row가 왼쪽에 정렬된다.
  display: flex;로 <img>와 <div>가 한 줄에 오도록 한다.
  */
  margin-bottom: 25px;
  /* 채팅 간의 공간을 만들어줬다. */
  animation: fadeInSide-message-row 2s ease-in-out;
}

.message-row img {
  width: 50px;
  height: 50px;
  border-radius: 40%;
  margin-right: 10px;
  /* 사진과 message__author 간의 공간을 주었다. */
}
.message__author {
  margin-bottom: 5px;
  display: block;
  /* message__author는 <span>이기 때문에 display: block;을 줘야 padding이나 margin을 줄 수 있다. */
}

.message_info {
  display: flex;
  align-items: flex-end;
  /* align-items를 쓰기 위해 display: flex; 준 후 align-items: flex-end; 으로 수직 아래에 message_info를 배치한다.
    특히 message_time이 아래쪽에 깔리 게 하기 위함이 크다.
  */
}

.message__bubble {
  background-color: white;
  padding: 13px;
  /* 좌우 padding 값을 줘야 배경과 글자 사이 공간이 생김 */
  font-size: 18px;
  border-radius: 35%;
  border-top-left-radius: 0px;
  /* 말풍선 꼭다리를 만들었다. */
  margin-right: 5px;
}

.message__time,
.message__author {
  opacity: 0.8;
  font-size: 13px;
}

@keyframes fadeInSide-message-row--own {
  from {
    transform: translateX(80px);
    opacity: 0;
  }
  to {
    transform: none;
    opacity: 1;
  }
  /* 채팅창에서 아래쪽 채팅을 위한 애니메이션이다. */
}

.message-row--own {
  justify-content: flex-end;
  /* message-row에서 이미 display: flex;를 줬기 때문에 여기선 생략한다. */
  animation: fadeInSide-message-row--own 2s ease-in-out;
}

.message-row--own .message__bubble {
  background-color: var(--yellow);
  border-top-right-radius: 0px;
  border-top-left-radius: 15px;
  /* 내가 채팅한 말풍선의 꼭다리를 만들어줬다. message__bubble 만들었던 다른 꼭다리는 필요 없으므로 수정해줬다. */
  margin-right: 0px;
  margin-left: 5px;
  /* 아래 말풍선은 방향이 다르므로 .message__bubble에서 줬던 margin-right을 다시 0px로 만들어줬다. */
}

.message-row--own .message__time {
  margin-right: 5px;
}

/*
.message-row--own .message__time {
order: 0;
}
.message-row--own .message__bubble {
order: 1;
}

order를 이용해 순서를 바꿀 수 있다. 다만 flex children에게만 사용 가능하다.
*/

.message-row--own .message_info {
  flex-direction: row-reverse;
  /* 이 경우엔 위 order를 사용하는 것 보다 이런 식으로 flex-direction을 변경하는 게 더 편하다. */
}

.reply {
  position: fixed;
  bottom: 0;
  width: 100%;
  background-color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 5px 25px;
  box-sizing: border-box;
  /* padding 때문에 아이콘이 안 보이게 돼서 box-sizing: border-box;를 적용해줬다. */
  transition: transform 0.3s ease-in-out;
  /* 아래에서 만든 키보드 관련 transition이 자연스럽게 하기 위해 여기에 transition 값을 주었다. */
}

.reply i {
  /* > 가 없으므로 모든 아이콘에 적용된다. */
  opacity: 0.5;
}

.reply .reply__column:first-child {
  width: 10%;
}

.reply .reply__column:last-child {
  width: 90%;
  position: relative;
  /* 아래에서 absolute를 제대로 사용하기 위해 여기에 position: relative;를 적용했다. */
}

.reply input {
  padding: 12px;
  width: 100%;
  /* <input> <div>인 reply__column의 자식이다. width에 %를 사용하고 싶으면 우선 부모의 width부터 설정하여야 한다
      부모의 width를 기준으로 %가 적용되기 때문이다.
  */
  border: var(--main-border);
  border-radius: 20px;
  transition: all 0.3s ease-in-out;
  /* .reply input 에 transition을 주지 않으면 애니메이션이 매우 부자연스러워진다. */
}

.reply__column:last-child > i, /* last-child > i는 바로 아래 i를 말한다. */
.reply__column:last-child button {
  position: absolute;
  right: 0;
  top: 6px;
}

.reply__column:last-child > i {
  right: 40px;
  top: 13px;
}

.reply__column button {
  background-color: var(--yellow);
  border: none;
  width: 30px;
  height: 30px;
  border-radius: 50%;
}

.reply__column button i {
  opacity: 1;
  /* .reply i에서 전체 아이콘들에 opacity: 0.5;를 줬었는데 버튼 아이콘만은 예외로 하고싶어 별도로 지정해줬다. */
}

.reply__column button:focus,
.reply__column button:active {
  outline: none;
  /* 버튼을 클릭해도 아무일도 일어나지 않게했다. */
}

.reply .reply__column:first-child,
.reply .fa-laugh-beam,
.reply button {
  transition: opacity 0.3s ease-in-out;
  /* 
  여기 뿐만reply input 에 transition을 주지 않으면 애니메이션이 매우 부자연스러워진다. 
  */
}

.reply:focus-within .reply__column:first-child,
.reply:focus-within .fa-laugh-beam,
.reply:focus-within button {
  opacity: 0;
  /* .reply:focus-within .reply__column:first-child는 .reply:focus-within가 참이면
      .reply__column:first-child가 작동하게 해준다. */
  /* .reply 내부 element가 focus 되면 아이콘을 숨겨준다. 키보드에 집중하게 하려는 모양 */
}

.reply input:focus {
  width: 98vw;
  /* 키보드가 커지는 애니메이션을 부드럽게 하기 위해 .reply input 에 transition을 주었다. */
  transform: translateX(-11%) translateY(-80px);
  /* 키보드가  + 아이콘이 차지했던 왼쪽 빈 공간까지 꽉 채우게 해준다. */
}

.reply:focus-within {
  transform: translateY(80px);
}

/* .
  .reply:focus-within에서 transform: translateY(80px);로 .reply 전체를 80px 아래로 내린 후
  .reply:focus-within input에서 transform: translateX(-11%) translateY(-80px);로 input 
  부분만 80px 위로 떠오르게 하는 transition이 완성된다. 이 transition 또한 자연스럽게 하기
  위해 .reply에 transition 관련 설정을 주었다.
*/

/* focus-withins은  부모 요소에 사용하면 내부 자식 요소에 포커스 된 경우까지 스타일을 쉽게 적용된다. */
