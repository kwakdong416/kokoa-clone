#friends-display-link {
  text-align: center;
  display: block;
  /* 
  <a>는 inline 요소이기 때문에 높이와 너비를 가지지 않는다. 그래서 중앙으로 움직이려면 block이나 flexbox로 변경해야 한다.
  display: block;을 주면 기본적으로 표시되는 가로 영역을 모두 채우게끔 영역이 설정되며 다음에 등장하는 요소는 줄바꿈 처리된다. 
  */
  background-color: #fafafa;
  padding: 15px 0px;
  font-size: 18x;
  margin-bottom: 10px;
  /* Friends' Names Display와 friends-screen 사이에 margin을 주었다.*/
  margin-top: -10px;
  /*  Friends 화면의 header에 margin-bottom을 줬었는데 friends-display-link가
  있는 화면에는 안 어울려 여기서 negative margin을 주었다.
  */
}

/* 
friends 스크린에만 있는 요소들을 위한 css 파일을 따로 만들었다. 
justify-content와 alignn-items는 flexbox일 때만 사용 가능하다.
*/

#friends-display-link i {
  margin: 0px 5px;
  color: rgba(0, 0, 0, 0.3);
  /* 아이콘 또한 일종의 텍스트이기 때문에 색상의 변경이 가능하다. */
}

.friends-screen {
  padding: 0px var(--horizontal-space);
  /* 
friends.html에서 <main> 태그를 이용해 3페이지에 사진과 텍스트 , subtitle이 나오는 부분을 하나의 box로 만든 다음 padding 주었다.
이렇게 하면 사진이 Friends라고 적힌 header만큼 왼쪽에 공간이 생긴다.
*/
}

.friends-screen__channel {
  margin-top: 25px;
  border-top: var(--main-border);
  /* 변수로 대체했다. */
  padding-top: 15px;
}

.friends-screen__channel-header {
  margin-bottom: 30px;
  /* 
 <div> 내의 <div> 들끼리의 공간을 주기 위해 margin-bottom: 30px;를 주었다. 
  Channel+chevron-up과 avatar-sm+Channel 사이의 공간
  */
  display: flex;
  justify-content: space-between;
  /*Channel과 chevron-up이 서로 떨어지게 하기 위해 justify-content: space-between;을 주었다.*/
  color: rgba(0, 0, 0, 0.5);
}

@keyframes hideSplashScreen {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
    visibility: hidden;
  }
  /* spalsh-screen 이 나타났다 사라지는 애니메이션이다. 
     visibility: hidden;은 html을 무시하도록 하는 테크닉이다.
     마우스에 걸리적거리지 않도록 해줄뿐 html이 사라진 것이 아니다.
     뭔가를 실제로 숨기거나 html 사라지게 하려면 javascript를 사용해야 한다.
     
     애니메이션른 from to 말고도 0-50-100 식으로도 구성 가능하다.
  */
}

.spalsh-screen {
  background-color: var(--yellow);
  position: absolute;
  height: 100vh; /* 화면 높이의 100% */
  width: 100vw; /* 화면 너비의 100% */
  top: 0;
  /* position: absolute;로 모든 것의 위로 오게 한 후  height: 100vh;와 width: 100vw;를 적용해서
    spalsh-scree 구역 전체를 덮어버린다. 그 후 top: 0;를 적용해서 화면 전체를 덮게 만든다. 
    
  
  */
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 132px;
  animation: hideSplashScreen 0.4s ease-in-out forwards;
  animation-delay: 2s;
  /* 애니메이션을 2초 지연시킨 후 0.4초 동안 실행한다. */
}

/* css에서는 element들은 이전의 상태로 되돌아간다. 그래서 노란 화면이 다시 나타나는 것 
   여기에 forwards를 추가해주면 애니메이션이 끝난 상태로 유지한다.다만 element가 사라진
   것이 아니라 opacity: 0;이 됐을 뿐이기 때문에 다른 것들을 클릭해도 반응이 없다.
   눈에 안 보일 뿐 여전히 splash-screen이 그 위를 덮고있기 떄문이다.

  위 hideSplashScreen에서 작성한 visibility: hidden;은 html을 무시하도록 하는 테크닉이다.
     마우스에 걸리적거리지 않도록 해줄뿐 html이 실제로 사라진 것이 아니다.element를 무시할 뿐이다.
     뭔가를 실제로 숨기거나 html 사라지게 하려면 javascript를 사용해야 한다.
*/
